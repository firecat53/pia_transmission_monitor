#!/usr/bin/env python
"""This file is part of pia_transmission_monitor.

The MIT License (MIT)

Copyright 2014 by Scott Hansen <firecat four one five three@gmail dot com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

"""

import ast
import fileinput
import shlex
import sys
from collections import namedtuple
from os.path import expanduser, join
from subprocess import Popen, PIPE
from threading import Thread
from time import sleep
try:
    import configparser as configparser
except ImportError:
    import ConfigParser as configparser
try:
    from urllib.request import urlopen, Request
except ImportError:
    from urllib2 import urlopen, Request
try:
    from urllib.error import URLError
except ImportError:
    from urllib2 import URLError
try:
    from urllib.parse import urlencode
except ImportError:
    from urllib import urlencode


def get_config():
    """Parse config.ini. Return namedtuple of
    (user, pw, client_id, pia_url, transmission_rc, tun_dev,
     transmission_daemon, openvpn_server, openvpn_gateway, sudo)

    user:           PIA username
    pw:             PIA password
    client_id:      PIA generated client_id (see port forwarding forum post)
    pia_url:        PIA port forwarding API URL
    transmission_rc file path to transmission-daemon settings.json
    tun_dev:        name of tun/tap device (tun0)
    transmission_daemon:    name of transmission service
    openvpn_server:         name of openvpn service
    openvpn_gateway:        name of openvpn configuration file to use
    sudo:           "sudo" or ""

    """
    conf = configparser.ConfigParser()
    locations = ("/etc/pia_transmission_monitor",
                 expanduser("~/.config/pia_transmission_monitor"))
    conf.read([join(i, 'config.ini') for i in locations])
    c_nt = namedtuple("c_nt", ["user", "pw", "client_id", "pia_url",
                               "transmission_rc", "tun_dev",
                               "transmission_daemon", "openvpn_server",
                               "openvpn_gateway", "sudo"])
    with open(expanduser(conf.get('File_Paths', 'pia_credentials'))) as f:
        user, pw = filter(None, (line.rstrip() for line in f))
    with open(expanduser(conf.get('File_Paths', 'pia_client_id'))) as f:
        client_id = filter(None, (line.rstrip() for line in f))
    return c_nt(user,
                pw,
                client_id,
                conf.get('PIA', 'url'),
                expanduser(conf.get('File_Paths', 'transmission_rc')),
                conf.get('Server', 'tun_device'),
                conf.get('Server', 'transmission_daemon'),
                conf.get('Server', 'openvpn_server'),
                conf.get('Server', 'openvpn_gateway'),
                conf.get('Server', 'sudo'))


def ip_check(conf):
    """Check IP of tun device and restart VPN until tun0 is available. Return
    the IP address.

    """
    while True:
        try:
            ip = Popen(["ip", "addr", "show", conf.tun_dev],
                       stdout=PIPE).communicate()[0].decode()
            ip = ip.split('inet')[1].split()[0]
            break
        except IndexError:
            # If tun0 doesn't exist
            return False
    return ip


def port_check(conf):
    """Submit a request to PIA port forwarding API. The call should return
    something like: {"port": 12345}. The function returns False or an integer
    port number.

    """
    ip = ip_check(conf)
    if ip is False:
        return False
    data = {"user": conf.user, "pass": conf.pw, "client_id": conf.client_id,
            "local_ip": ip}
    data = urlencode(data)
    req = Request(conf.pia_url, data.encode())
    out = urlopen(req).read().decode()
    port = ast.literal_eval(out)["port"]
    return port


def service_start_stop(name, status, conf, args=None):
    """Stop, start or restart any 'service' files with the syntax:
        [sudo] service <servicename> start|stop|restart

        If sudo is used, make sure appropriate NOPASSWD permissions are given
        with visudo

    """
    if args is not None:
        args = shlex.split(args)
    else:
        args = []
    if status not in ("start", "stop", "restart"):
        raise Exception("Invalid service status")
    cmd = ["service", name, status] + args
    sudo = conf.sudo
    if sudo:
        cmd = [sudo] + cmd
    print(Popen(cmd, stdout=PIPE).communicate()[0].decode())


def restart_vpn(conf):
    """Restarts openvpn and transmission. Updates the transmission bind address
    after openvpn restarts.

    """
    service_start_stop(conf.transmission_daemon, "stop", conf)
    control = False
    while control is False:
        # Continue restarting openvpn until we have a good IP address
        service_start_stop(conf.openvpn_server, "stop", conf)
        service_start_stop(conf.openvpn_server, "start", conf,
                           conf.openvpn_gateway)
        sleep(20)
        control = bind_addr_update(conf)
        if control is True:
            service_start_stop(conf.transmission_daemon, "start", conf)


def port_update(conf):
    """Update the port number in transmission.

    """
    port = port_check(conf)
    if port is False:
        return False
    # Update the port and make sure port forwarding is set. Authentication from
    # ENV variable TR_AUTH (username:password)
    args = shlex.split("transmission-remote -p {} -ne -m".format(port))
    Popen(args, stdout=PIPE).communicate()


def bind_addr_update(conf):
    """Update the bind address in transmission when it changes. Daemon must not
    be running.

    """
    ip = ip_check(conf)
    if ip is False:
        return False
    if str(ip) not in open(conf.transmission_rc).read():
        for line in fileinput.input(conf.transmission_rc, inplace=1):
            if "bind-address-ipv4" in line:
                line = '    "bind-address-ipv4": "{}",'.format(ip)
            sys.stdout.write(line)
    return True


def daily():
    """Thread to count one day

    """
    sleep(86400)


if __name__ == "__main__":
    conf = get_config()
    t = Thread(target=daily)
    while True:
        if not t.isAlive():
            restart_vpn(conf)
            t = Thread(target=daily)
            t.start()
        try:
            port_update(conf)
            # sleep 58 min. The call to the PIA API should be once per hour.
            sleep(3480)
        except URLError:
            restart_vpn(conf)
            sleep(30)
